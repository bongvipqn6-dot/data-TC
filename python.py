import streamlit as st
import google.generativeai as genai

# ------------------------- KHUNG CHAT T∆Ø∆†NG T√ÅC V·ªöI GEMINI -------------------------
st.markdown("---")
st.subheader("üí¨ Tr√≤ chuy·ªán tr·ª±c ti·∫øp v·ªõi Gemini AI")

# --- 1. Qu·∫£n l√Ω Session State v√† C·∫•u h√¨nh API ---

# Kh·ªüi t·∫°o session_state ƒë·ªÉ l∆∞u l·ªãch s·ª≠ h·ªôi tho·∫°i (giao di·ªán)
if "chat_messages" not in st.session_state:
    st.session_state.chat_messages = []
    
# Kh·ªüi t·∫°o ƒë·ªëi t∆∞·ª£ng CHAT SESSION ƒë·ªÉ Gemini ghi nh·ªõ l·ªãch s·ª≠ (KEY FIX)
if "gemini_chat_session" not in st.session_state:
    st.session_state.gemini_chat_session = None

api_key = st.secrets.get("GEMINI_API_KEY")

if not api_key:
    st.warning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y kh√≥a API Gemini. Vui l√≤ng c·∫•u h√¨nh 'GEMINI_API_KEY' trong `.streamlit/secrets.toml`.")
else:
    # C·∫•u h√¨nh v√† kh·ªüi t·∫°o phi√™n chat ch·ªâ ch·∫°y M·ªòT L·∫¶N (gi√∫p app ch·∫°y m∆∞·ª£t h∆°n)
    if st.session_state.gemini_chat_session is None:
        try:
            genai.configure(api_key=api_key)
            chat_model = genai.GenerativeModel('gemini-pro')
            # S·ª≠ d·ª•ng start_chat ƒë·ªÉ t·∫°o ƒë·ªëi t∆∞·ª£ng Chat c√≥ kh·∫£ nƒÉng l∆∞u history
            st.session_state.gemini_chat_session = chat_model.start_chat(history=[])
        except Exception as e:
            st.error(f"L·ªói c·∫•u h√¨nh Gemini: {e}. Vui l√≤ng ki·ªÉm tra l·∫°i API Key.")
            st.stop()
    
    chat_session = st.session_state.gemini_chat_session

    # --- 2. Hi·ªÉn th·ªã L·ªãch s·ª≠ Tr√≤ chuy·ªán ---
    
    # Hi·ªÉn th·ªã l·ªãch s·ª≠ ƒë√£ l∆∞u
    for msg in st.session_state.chat_messages:
        with st.chat_message(msg["role"]):
            st.markdown(msg["content"])

    # --- 3. X·ª≠ l√Ω Input v√† Ph·∫£n h·ªìi ---

    prompt = st.chat_input("B·∫°n mu·ªën h·ªèi g√¨ Gemini?")

    if prompt:
        # a) Hi·ªÉn th·ªã c√¢u h·ªèi ng∆∞·ªùi d√πng v√† l∆∞u v√†o l·ªãch s·ª≠ giao di·ªán
        st.chat_message("user").markdown(prompt)
        st.session_state.chat_messages.append({"role": "user", "content": prompt})
        
        # b) G·ª≠i c√¢u h·ªèi ƒë·∫øn Gemini
        with st.chat_message("assistant"):
            with st.spinner("ü§ñ Gemini ƒëang suy nghƒ©..."):
                try:
                    # G·ª≠i tin nh·∫Øn qua CHAT SESSION ƒë·ªÉ duy tr√¨ b·ªëi c·∫£nh.
                    # D√πng stream=True v√† st.write_stream() ƒë·ªÉ hi·ªÉn th·ªã ph·∫£n h·ªìi d·∫ßn d·∫ßn (t·ªëi ∆∞u UX).
                    response_stream = chat_session.send_message(prompt, stream=True)
                    full_reply = st.write_stream(response_stream)
                    
                except Exception as e:
                    full_reply = f"‚ùå L·ªói t·ª´ Gemini: {e}"
                    st.markdown(full_reply)
            
        # c) L∆∞u ph·∫£n h·ªìi ƒë·∫ßy ƒë·ªß v√†o l·ªãch s·ª≠ chat c·ªßa Streamlit
        st.session_state.chat_messages.append({"role": "assistant", "content": full_reply})

# ----------------------------------------------------------------------------------import streamlit as st
import google.generativeai as genai

# --- C·∫§U H√åNH TRANG BAN ƒê·∫¶U ---
st.set_page_config(
    page_title="Streamlit Gemini Chat App",
    page_icon="‚ú®",
    layout="wide"
)

# ------------------------- KHUNG CHAT T∆Ø∆†NG T√ÅC V·ªöI GEMINI -------------------------
st.markdown("---")
st.subheader("üí¨ Tr√≤ chuy·ªán tr·ª±c ti·∫øp v·ªõi Gemini AI")

# --- 1. Qu·∫£n l√Ω Session State v√† C·∫•u h√¨nh API ---

# Kh·ªüi t·∫°o session_state ƒë·ªÉ l∆∞u l·ªãch s·ª≠ h·ªôi tho·∫°i (d√πng cho hi·ªÉn th·ªã giao di·ªán)
if "chat_messages" not in st.session_state:
    st.session_state.chat_messages = []
# Kh·ªüi t·∫°o ƒë·ªëi t∆∞·ª£ng chat (d√πng ƒë·ªÉ l∆∞u l·ªãch s·ª≠ h·ªôi tho·∫°i Gemini)
if "gemini_chat_session" not in st.session_state:
    st.session_state.gemini_chat_session = None

api_key = st.secrets.get("GEMINI_API_KEY")

if not api_key:
    st.warning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y kh√≥a API Gemini. Vui l√≤ng c·∫•u h√¨nh 'GEMINI_API_KEY' trong `.streamlit/secrets.toml`.")
else:
    # C·∫•u h√¨nh v√† kh·ªüi t·∫°o phi√™n chat ch·ªâ ch·∫°y m·ªôt l·∫ßn
    if st.session_state.gemini_chat_session is None:
        try:
            # 1a. C·∫•u h√¨nh API
            genai.configure(api_key=api_key)
            
            # 1b. Kh·ªüi t·∫°o m√¥ h√¨nh v√† phi√™n chat duy tr√¨ l·ªãch s·ª≠ (gemini-pro)
            # D√πng start_chat v·ªõi history=[] ƒë·ªÉ ƒë·∫£m b·∫£o phi√™n chat m·ªõi ho√†n to√†n
            chat_model = genai.GenerativeModel('gemini-pro')
            st.session_state.gemini_chat_session = chat_model.start_chat(history=[])
        except Exception as e:
            st.error(f"L·ªói c·∫•u h√¨nh Gemini: {e}. Vui l√≤ng ki·ªÉm tra l·∫°i API Key.")
            st.stop() # D·ª´ng script n·∫øu c·∫•u h√¨nh th·∫•t b·∫°i
    
    # L·∫•y phi√™n chat ƒë√£ kh·ªüi t·∫°o
    chat_session = st.session_state.gemini_chat_session

    # --- 2. Hi·ªÉn th·ªã L·ªãch s·ª≠ Tr√≤ chuy·ªán ---
    
    # L·∫∑p qua l·ªãch s·ª≠ ƒë√£ l∆∞u trong session_state.chat_messages ƒë·ªÉ hi·ªÉn th·ªã l·∫°i
    for msg in st.session_state.chat_messages:
        with st.chat_message(msg["role"]):
            st.markdown(msg["content"])

    # --- 3. X·ª≠ l√Ω Input v√† Ph·∫£n h·ªìi ---

    # Nh·∫≠p c√¢u h·ªèi t·ª´ ng∆∞·ªùi d√πng
    prompt = st.chat_input("B·∫°n mu·ªën h·ªèi g√¨ Gemini?")

    if prompt:
        # 3a. Hi·ªÉn th·ªã c√¢u h·ªèi ng∆∞·ªùi d√πng v√† l∆∞u v√†o l·ªãch s·ª≠ giao di·ªán
        st.chat_message("user").markdown(prompt)
        st.session_state.chat_messages.append({"role": "user", "content": prompt})
        
        # 3b. G·ª≠i c√¢u h·ªèi ƒë·∫øn Gemini v√† nh·∫≠n ph·∫£n h·ªìi
        with st.chat_message("assistant"):
            # S·ª≠ d·ª•ng spinner ƒë·ªÉ c·∫£i thi·ªán tr·∫£i nghi·ªám ng∆∞·ªùi d√πng (UX)
            with st.spinner("ü§ñ Gemini ƒëang suy nghƒ©..."):
                try:
                    # G·ª≠i tin nh·∫Øn qua ƒë·ªëi t∆∞·ª£ng chat session ƒë·ªÉ duy tr√¨ b·ªëi c·∫£nh
                    # S·ª≠ d·ª•ng stream=True ƒë·ªÉ ph·∫£n h·ªìi hi·ªÉn th·ªã d·∫ßn d·∫ßn
                    response_stream = chat_session.send_message(prompt, stream=True)
                    
                    # st.write_stream hi·ªÉn th·ªã ph·∫£n h·ªìi t·ª´ng ph·∫ßn v√† tr·∫£ v·ªÅ n·ªôi dung ƒë·∫ßy ƒë·ªß
                    full_reply = st.write_stream(response_stream)
                    
                except Exception as e:
                    # X·ª≠ l√Ω l·ªói n·∫øu c√≥
                    full_reply = f"‚ùå L·ªói t·ª´ Gemini: {e}"
                    st.markdown(full_reply)
            
        # 3c. L∆∞u ph·∫£n h·ªìi ƒë·∫ßy ƒë·ªß v√†o l·ªãch s·ª≠ chat c·ªßa Streamlit
        # Bi·∫øn full_reply ƒë√£ ch·ª©a to√†n b·ªô n·ªôi dung sau khi streaming k·∫øt th√∫c
        st.session_state.chat_messages.append({"role": "assistant", "content": full_reply})

# ----------------------------------------------------------------------------------import streamlit as st
import google.generativeai as genai

# --- C·∫§U H√åNH TRANG BAN ƒê·∫¶U (c√≥ th·ªÉ gi·ªØ nguy√™n ho·∫∑c t√πy ch·ªânh) ---
st.set_page_config(
    page_title="Streamlit Gemini Chat App",
    page_icon="‚ú®",
    layout="wide"
)

# ------------------------- KHUNG CHAT T∆Ø∆†NG T√ÅC V·ªöI GEMINI -------------------------
st.markdown("---")
st.subheader("üí¨ Tr√≤ chuy·ªán tr·ª±c ti·∫øp v·ªõi Gemini AI")

# --- 1. Qu·∫£n l√Ω Session State v√† C·∫•u h√¨nh API ---

# Kh·ªüi t·∫°o session_state ƒë·ªÉ l∆∞u l·ªãch s·ª≠ h·ªôi tho·∫°i (d√πng cho hi·ªÉn th·ªã giao di·ªán)
if "chat_messages" not in st.session_state:
    st.session_state.chat_messages = []
# Kh·ªüi t·∫°o ƒë·ªëi t∆∞·ª£ng chat (d√πng ƒë·ªÉ l∆∞u l·ªãch s·ª≠ h·ªôi tho·∫°i Gemini)
if "gemini_chat_session" not in st.session_state:
    st.session_state.gemini_chat_session = None

api_key = st.secrets.get("GEMINI_API_KEY")

if not api_key:
    st.warning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y kh√≥a API Gemini. Vui l√≤ng c·∫•u h√¨nh 'GEMINI_API_KEY' trong `.streamlit/secrets.toml`.")
else:
    # C·∫•u h√¨nh v√† kh·ªüi t·∫°o phi√™n chat ch·ªâ ch·∫°y m·ªôt l·∫ßn
    if st.session_state.gemini_chat_session is None:
        try:
            # 1a. C·∫•u h√¨nh API
            genai.configure(api_key=api_key)
            
            # 1b. Kh·ªüi t·∫°o m√¥ h√¨nh v√† phi√™n chat duy tr√¨ l·ªãch s·ª≠ (gemini-pro)
            chat_model = genai.GenerativeModel('gemini-pro')
            st.session_state.gemini_chat_session = chat_model.start_chat(history=[])
        except Exception as e:
            st.error(f"L·ªói c·∫•u h√¨nh Gemini: {e}. Vui l√≤ng ki·ªÉm tra l·∫°i API Key.")
            # D·ª´ng script ƒë·ªÉ tr√°nh l·ªói g·ªçi API ti·∫øp theo
            st.stop()
    
    # L·∫•y phi√™n chat ƒë√£ kh·ªüi t·∫°o
    chat_session = st.session_state.gemini_chat_session

    # --- 2. Hi·ªÉn th·ªã L·ªãch s·ª≠ Tr√≤ chuy·ªán ---
    
    # L·∫∑p qua l·ªãch s·ª≠ ƒë√£ l∆∞u ƒë·ªÉ hi·ªÉn th·ªã l·∫°i
    for msg in st.session_state.chat_messages:
        with st.chat_message(msg["role"]):
            st.markdown(msg["content"])

    # --- 3. X·ª≠ l√Ω Input v√† Ph·∫£n h·ªìi ---

    # Nh·∫≠p c√¢u h·ªèi t·ª´ ng∆∞·ªùi d√πng
    prompt = st.chat_input("B·∫°n mu·ªën h·ªèi g√¨ Gemini?")

    if prompt:
        # 3a. Hi·ªÉn th·ªã c√¢u h·ªèi ng∆∞·ªùi d√πng v√† l∆∞u v√†o l·ªãch s·ª≠ giao di·ªán
        st.chat_message("user").markdown(prompt)
        st.session_state.chat_messages.append({"role": "user", "content": prompt})
        
        # 3b. G·ª≠i c√¢u h·ªèi ƒë·∫øn Gemini v√† nh·∫≠n ph·∫£n h·ªìi
        with st.chat_message("assistant"):
            # S·ª≠ d·ª•ng spinner ƒë·ªÉ c·∫£i thi·ªán UX
            with st.spinner("ü§ñ Gemini ƒëang suy nghƒ©..."):
                try:
                    # G·ª≠i tin nh·∫Øn qua ƒë·ªëi t∆∞·ª£ng chat session ƒë·ªÉ duy tr√¨ b·ªëi c·∫£nh (context)
                    response = chat_session.send_message(prompt, stream=True)
                    
                    # T·ªëi ∆∞u: S·ª≠ d·ª•ng stream ƒë·ªÉ ph·∫£n h·ªìi hi·ªÉn th·ªã d·∫ßn d·∫ßn
                    reply = st.write_stream(response)
                    
                except Exception as e:
                    # X·ª≠ l√Ω l·ªói n·∫øu c√≥
                    reply = f"‚ùå L·ªói t·ª´ Gemini: {e}"
                    st.markdown(reply)
            
        # 3c. L∆∞u ph·∫£n h·ªìi cu·ªëi c√πng v√†o l·ªãch s·ª≠ chat c·ªßa Streamlit
        # L·∫•y n·ªôi dung ƒë·∫ßy ƒë·ªß t·ª´ ph·∫£n h·ªìi Stream (n·∫øu d√πng stream=True)
        # Note: N·∫øu kh√¥ng d√πng stream, 'reply' ƒë√£ l√† response.text
        if isinstance(reply, str):
            final_reply_content = reply
        else:
            final_reply_content = "".join(response.text for response in chat_session.get_history()[-1].parts)
            
        st.session_state.chat_messages.append({"role": "assistant", "content": final_reply_content})

# ----------------------------------------------------------------------------------import streamlit as st

# ------------------------- KHUNG CHAT T∆Ø∆†NG T√ÅC V·ªöI GEMINI -------------------------
st.markdown("---")
st.subheader("üí¨ Tr√≤ chuy·ªán tr·ª±c ti·∫øp v·ªõi Gemini AI")

# Kh·ªüi t·∫°o session_state ƒë·ªÉ l∆∞u l·ªãch s·ª≠ h·ªôi tho·∫°i v√† ƒë·ªëi t∆∞·ª£ng chat
if "chat_messages" not in st.session_state:
    st.session_state.chat_messages = []
# Kh·ªüi t·∫°o ƒë·ªëi t∆∞·ª£ng chat (l∆∞u tr·ªØ l·ªãch s·ª≠)
if "gemini_chat_session" not in st.session_state:
    st.session_state.gemini_chat_session = None

# Ki·ªÉm tra API Key
api_key = st.secrets.get("GEMINI_API_KEY")
if not api_key:
    st.warning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y kh√≥a API Gemini. H√£y c·∫•u h√¨nh 'GEMINI_API_KEY' trong `.streamlit/secrets.toml`.")
else:
    # Ch·ªâ import v√† c·∫•u h√¨nh khi c√≥ API Key
    import google.generativeai as genai 
    
    # C·∫•u h√¨nh ch·ªâ ch·∫°y m·ªôt l·∫ßn
    if st.session_state.gemini_chat_session is None:
        try:
            genai.configure(api_key=api_key)
            # Kh·ªüi t·∫°o m√¥ h√¨nh v√† phi√™n chat
            chat_model = genai.GenerativeModel('gemini-pro')
            st.session_state.gemini_chat_session = chat_model.start_chat(history=[])
        except Exception as e:
            st.error(f"L·ªói c·∫•u h√¨nh Gemini: {e}")
            st.stop()

    chat_session = st.session_state.gemini_chat_session

    # Hi·ªÉn th·ªã l·ªãch s·ª≠ tr√≤ chuy·ªán ƒë√£ l∆∞u trong session_state.chat_messages
    for msg in st.session_state.chat_messages:
        with st.chat_message(msg["role"]):
            st.markdown(msg["content"])

    # Nh·∫≠p c√¢u h·ªèi t·ª´ ng∆∞·ªùi d√πng
    prompt = st.chat_input("B·∫°n mu·ªën h·ªèi g√¨ Gemini?")

    if prompt:
        # 1. Hi·ªÉn th·ªã c√¢u h·ªèi ng∆∞·ªùi d√πng
        st.chat_message("user").markdown(prompt)
        st.session_state.chat_messages.append({"role": "user", "content": prompt})
        
        # 2. G·ª≠i c√¢u h·ªèi ƒë·∫øn Gemini v√† nh·∫≠n ph·∫£n h·ªìi
        with st.chat_message("assistant"):
            # S·ª≠ d·ª•ng m·ªôt spinner ƒë·ªÉ th·ªÉ hi·ªán qu√° tr√¨nh ƒëang x·ª≠ l√Ω
            with st.spinner("ü§ñ Gemini ƒëang suy nghƒ©..."):
                try:
                    # G·ª≠i tin nh·∫Øn qua ƒë·ªëi t∆∞·ª£ng chat session ƒë·ªÉ duy tr√¨ l·ªãch s·ª≠
                    response = chat_session.send_message(prompt)
                    reply = response.text
                except Exception as e:
                    # X·ª≠ l√Ω l·ªói n·∫øu c√≥
                    reply = f"‚ùå L·ªói t·ª´ Gemini: {e}"
            
            # 3. Hi·ªÉn th·ªã ph·∫£n h·ªìi t·ª´ Gemini
            st.markdown(reply)
            
        # 4. L∆∞u ph·∫£n h·ªìi v√†o l·ªãch s·ª≠ chat c·ªßa Streamlit
        st.session_state.chat_messages.append({"role": "assistant", "content": reply})

# ----------------------------------------------------------------------------------
