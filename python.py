# ------------------------- KHUNG CHAT T∆Ø∆†NG T√ÅC V·ªöI GEMINI -------------------------
st.markdown("---")
st.subheader("üí¨ Tr√≤ chuy·ªán tr·ª±c ti·∫øp v·ªõi Gemini AI")

# Kh·ªüi t·∫°o session_state ƒë·ªÉ l∆∞u l·ªãch s·ª≠ h·ªôi tho·∫°i
if "chat_messages" not in st.session_state:
    st.session_state.chat_messages = []

# Ki·ªÉm tra API Key
api_key = st.secrets.get("GEMINI_API_KEY")
if not api_key:
    st.warning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y kh√≥a API Gemini. H√£y c·∫•u h√¨nh 'GEMINI_API_KEY' trong `.streamlit/secrets.toml`.")
else:
    import google.generativeai as genai
    genai.configure(api_key=api_key)
    chat_model = genai.GenerativeModel('gemini-pro')

    # Hi·ªÉn th·ªã l·ªãch s·ª≠ tr√≤ chuy·ªán
    for msg in st.session_state.chat_messages:
        with st.chat_message(msg["role"]):
            st.markdown(msg["content"])

    # Nh·∫≠p c√¢u h·ªèi t·ª´ ng∆∞·ªùi d√πng
    prompt = st.chat_input("B·∫°n mu·ªën h·ªèi g√¨ Gemini?")

    if prompt:
        # Hi·ªÉn th·ªã c√¢u h·ªèi ng∆∞·ªùi d√πng
        st.chat_message("user").markdown(prompt)
        st.session_state.chat_messages.append({"role": "user", "content": prompt})

        try:
            response = chat_model.generate_content(prompt)
            reply = response.text
        except Exception as e:
            reply = f"‚ùå L·ªói t·ª´ Gemini: {e}"

        # Hi·ªÉn th·ªã ph·∫£n h·ªìi t·ª´ Gemini
        st.chat_message("assistant").markdown(reply)
        st.session_state.chat_messages.append({"role": "assistant", "content": reply})
